{
  "__DOC__" : "ABAC policies for CHAPI SA service",

  "create_slice" : {
      "__DOC__" : "Operators, project Leads, members, admins may create slice",
      "assertions" : [
        "ME.IS_$ROLE_$PROJECT<-CALLER"
	],
      "policies" : [
        "ME.MAY_$METHOD<-ME.IS_OPERATOR",
        "ME.MAY_$METHOD_$PROJECT<-ME.IS_LEAD_$PROJECT",
        "ME.MAY_$METHOD_$PROJECT<-ME.IS_ADMIN_$PROJECT",
        "ME.MAY_$METHOD_$PROJECT<-ME.IS_MEMBER_$PROJECT"
      ]
   },

   "lookup_slices" : {
     "__DOC__" : "Operators, leads/admins, members, auditors may lookup slice",
      "assertions" : [
        "ME.IS_$ROLE_$SLICE<-CALLER",
        "ME.IS_$ROLE_$PROJECT<-CALLER"
	],
     "policies" : [
       "ME.MAY_$METHOD<-ME.IS_OPERATOR",
       "ME.MAY_$METHOD_$SLICE<-ME.BELONGS_TO_$SLICE",
       "ME.MAY_$METHOD_$PROJECT<-ME.BELONGS_TO_$PROJECT"
     ]
   },

  "update_slice" : {
      "__DOC__" : "Operators and slice leads/admins can update slice",
      "assertions" : [
        "ME.IS_$ROLE_$SLICE<-CALLER"
	],
      "policies" : [
         "ME.MAY_$METHOD<-ME.IS_OPERATOR",
         "ME.MAY_$METHOD_$SLICE<-ME.IS_LEAD_$SLICE",
         "ME.MAY_$METHOD_$SLICE<-ME.IS_ADMIN_$SLICE"
      ]
   },

  "get_slice_credentials" :  {
     "__DOC__" : "Slice lead/admin/member or operators can get slice cred",
      "assertions" : [
        "ME.IS_$ROLE_$SLICE<-CALLER"
	],
     "policies" : [
        "ME.MAY_$METHOD<-ME.IS_OPERATOR",
        "ME.MAY_$METHOD_$SLICE<-ME.IS_LEAD_$SLICE",
        "ME.MAY_$METHOD_$SLICE<-ME.IS_ADMIN_$SLICE",
        "ME.MAY_$METHOD_$SLICE<-ME.IS_MEMBER_$SLICE"
     ]
    },

    "get_project_credentials" :  {
       "__DOC__" : "Project lead/admin/member or operators can get project cred",
        "assertions" : [
          "ME.IS_$ROLE_$PROJECT<-CALLER"
  	],
       "policies" : [
          "ME.MAY_$METHOD<-ME.IS_OPERATOR",
          "ME.MAY_$METHOD_$PROJECT<-ME.IS_LEAD_$PROJECT",
          "ME.MAY_$METHOD_$PROJECT<-ME.IS_ADMIN_$PROJECT",
          "ME.MAY_$METHOD_$PROJECT<-ME.IS_MEMBER_$PROJECT"
       ]
      },

  "modify_slice_membership" : {
      "__DOC__" : "Operators and slice Lead/Admin can modify slice membership",
      "assertions" : [
        "ME.IS_$ROLE_$SLICE<-CALLER"
	],
      "policies" : [
        "ME.MAY_$METHOD<-ME.IS_OPERATOR",
        "ME.MAY_$METHOD_$SLICE<-ME.IS_LEAD_$SLICE",
        "ME.MAY_$METHOD_$SLICE<-ME.IS_ADMIN_$SLICE"
     ]
    },

  "lookup_slice_members" : {
       "__DOC__" : "Operators and slice members can lookup slice members",
      "assertions" : [
        "ME.IS_$ROLE_$SLICE<-CALLER"
	],
       "policies" : [
          "ME.MAY_$METHOD<-ME.IS_OPERATOR",
          "ME.MAY_$METHOD_$SLICE<-ME.BELONGS_TO_$SLICE"
       ]
     },

  "lookup_slices_for_member" : {
       "__DOC__" : "Operators, self and members sharing a slice",
      "assertions" : [
        "ME.INVOKING_ON_$MEMBER<-CALLER",
        "ME.$SHARES_SLICE_$MEMBER<-CALLER"
	],
       "policies" : [
         "ME.MAY_$METHOD<-ME.IS_OPERATOR",
         "ME.MAY_$METHOD<-ME.INVOKING_ON_$SELF",
         "ME.MAY_$METHOD_$MEMBER<-ME.SHARES_SLICE_$MEMBER"
       ]
     },

  "create_project" : {
       "__DOC__" : "Operators and PIs can create projects",
       "policies" : [
         "ME.MAY_$METHOD<-ME.IS_OPERATOR",
         "ME.MAY_$METHOD<-ME.IS_PI"
       ]
     },

  "lookup_projects" : {
       "__DOC__" : "Anyone with legitimate cert can call lookup projects",
       "policies" : [
         "ME.MAY_$METHOD<-CALLER"
       ]
     },

   "update_project" : {
     "__DOC__" : "Operators and project leads/admins can update project",
      "assertions" : [
        "ME.IS_$ROLE_$PROJECT<-CALLER"
	],
     "policies" : [
       "ME.MAY_$METHOD<-ME.IS_OPERATOR",
       "ME.MAY_$METHOD_$PROJECT<-ME.IS_LEAD_$PROJECT",
       "ME.MAY_$METHOD_$PROJECT<-ME.IS_ADMIN_$PROJECT"
      ]
   },

   "modify_project_membership" : {
     "__DOC__" : "Operators, authorities and project leads/admins can modify project membership",
      "assertions" : [
        "ME.IS_$ROLE_$PROJECT<-CALLER"
	],
     "policies" : [
       "ME.MAY_$METHOD<-ME.IS_OPERATOR",
       "ME.MAY_$METHOD<-ME.IS_AUTHORITY",
       "ME.MAY_$METHOD_$PROJECT<-ME.IS_LEAD_$PROJECT",
       "ME.MAY_$METHOD_$PROJECT<-ME.IS_ADMIN_$PROJECT"
      ]
   },


 "lookup_project_members" : {
   "__DOC__" : "Operators and project members can lookup project members",
    "assertions" : [
      "ME.IS_$ROLE_$PROJECT<-CALLER"
   ],
   "policies" : [
     "ME.MAY_$METHOD<-ME.IS_OPERATOR",
     "ME.MAY_$METHOD_$PROJECT<-ME.BELONGS_TO_$PROJECT"
    ]
  },

  "lookup_projects_for_member" : {
    "__DOC__" : "Operators, self, and people sharing a project",
    "assertions" : [
      "ME.INVOKING_ON_$MEMBER<-CALLER",
      "ME.$SHARES_PROJECT_$MEMBER<-CALLER"
    ],
    "policies" : [
     "ME.MAY_$METHOD<-ME.IS_OPERATOR",
     "ME.MAY_$METHOD<-ME.INVOKING_ON_$SELF",
     "ME.MAY_$METHOD_$MEMBER<-ME.SHARES_PROJECT_$MEMBER"
    ]
   },

  "create_sliver_info" : {
    "__DOC__" : "Operators, authorities and slice lead/admin/member",
    "assertions" : [
      "ME.IS_$ROLE_$SLICE<-CALLER"
    ],
    "policies" : [
      "ME.MAY_$METHOD<-ME.IS_OPERATOR",
      "ME.MAY_$METHOD<-ME.IS_AUTHORITY",
      "ME.MAY_$METHOD_$SLICE<-ME.IS_LEAD_$SLICE",
      "ME.MAY_$METHOD_$SLICE<-ME.IS_ADMIN_$SLICE",
      "ME.MAY_$METHOD_$SLICE<-ME.IS_MEMBER_$SLICE"
     ]
   },

   "delete_sliver_info" : {
     "__DOC__" : "Operators, authorities and slcie lead/admin/member",
    "assertions" : [
      "ME.IS_$ROLE_$SLICE<-CALLER"
    ],
     "policies" : [
       "ME.MAY_$METHOD<-ME.IS_OPERATOR",
       "ME.MAY_$METHOD<-ME.IS_AUTHORITY",
       "ME.MAY_$METHOD_$SLICE<-ME.IS_LEAD_$SLICE",
       "ME.MAY_$METHOD_$SLICE<-ME.IS_ADMIN_$SLICE",
       "ME.MAY_$METHOD_$SLICE<-ME.IS_MEMBER_$SLICE"
     ]
   },

  "update_sliver_info" : {
     "__DOC__" : "Operators, authorities and slcie lead/admin/member",
    "assertions" : [
      "ME.IS_$ROLE_$SLICE<-CALLER"
    ],
     "policies" : [
       "ME.MAY_$METHOD<-ME.IS_OPERATOR",
       "ME.MAY_$METHOD<-ME.IS_AUTHORITY",
       "ME.MAY_$METHOD_$SLICE<-ME.IS_LEAD_$SLICE",
       "ME.MAY_$METHOD_$SLICE<-ME.IS_ADMIN_$SLICE",
       "ME.MAY_$METHOD_$SLICE<-ME.IS_MEMBER_$SLICE"
     ]
   },

  "lookup_sliver_info" : {
     "__DOC__" : [
       "Operators, Authorities",
       "Can ask for sliver info by SLIVER_INFO_SLICE_URN if slice member",
       "Can ask for slier info by CREATOR_URN if creator is caller"
     ],
    "assertions" : [
      "ME.IS_$ROLE_$SLICE<-CALLER",
      "ME.INVOKING_ON_$MEMBER<-CALLER"
    ],
     "policies" : [
       "ME.MAY_$METHOD<-ME.IS_OPERATOR",
       "ME.MAY_$METHOD<-ME.IS_AUTHORITY",
       "ME.MAY_$METHOD_$SLICE<-ME.BELONGS_TO_$SLICE",
       "ME.MAY_$METHOD_$MEMBER<-ME.INVOKING_ON_$SELF"
     ]
   },

   "create_request" : {
      "__DOC__" : "Open to all",
      "policies" : [
         "ME.MAY_$METHOD<-CALLER"
       ]
   },

   "resolve_pending_request" :  {
     "__DOC__" : [
        "Only if you are operator or the lead/admin of the project context",
	"or the requestor"
     ],
    "assertions" : [
      "ME.IS_$REQUEST_ROLE_$REQUEST_ID<-CALLER",
      "ME.IS_$REQUESTOR_$REQUEST_ID<-CALLER"
    ],
     "policies" : [
       "ME.MAY_$METHOD<-ME.IS_OPERATOR",
       "ME.MAY_$METHOD<-ME.IS_LEAD_$REQUEST_ID",
       "ME.MAY_$METHOD<-ME.IS_ADMIN_$REQUEST_ID",
       "ME.MAY_$METHOD<-ME.IS_REQUESTOR_$REQUEST_ID"
     ]
   },

  "get_requests_for_context" :  {
    "__DOC__" : "Only if you are operator or lead/admin of the context",
    "assertions" : [
      "ME.IS_$REQUEST_ROLE_$REQUEST_ID<-CALLER"
    ],
    "policies" : [
      "ME.MAY_$METHOD<-ME.IS_OPERATOR",
      "ME.MAY_$METHOD<-ME.IS_LEAD_$REQUEST_ID",
      "ME.MAY_$METHOD<-ME.IS_ADMIN_$REQUEST_ID"
    ]
   },

   "get_requests_by_user" :  {
      "__DOC__" : "member_id argument == caller",
      "assertions" : [
        "ME.INVOKING_ON_$MEMBER<-CALLER"
      ],
      "policies" : [
        "ME.MAY_$METHOD<-ME.IS_OPERATOR",
        "ME.MAY_$METHOD<-ME.INVOKING_ON_$SELF"
      ]
    },

  "get_pending_requests_for_user" :  {
    "__DOC__" : "Operator and for self",
    "assertions" : [
      "ME.INVOKING_ON_$MEMBER<-CALLER"
    ],
    "policies" : [
      "ME.MAY_$METHOD<-ME.IS_OPERATOR",
      "ME.MAY_$METHOD<-ME.INVOKING_ON_$SELF"
    ]
  },


  "get_number_of_pending_requests_for_user" :  {
    "__DOC__" : "Operator and Self",
    "assertions" : [
      "ME.INVOKING_ON_$MEMBER<-CALLER"
    ],
    "policies" : [
      "ME.MAY_$METHOD<-ME.IS_OPERATOR",
      "ME.MAY_$METHOD<-ME.INVOKING_ON_$SELF"
    ]
  },

  "get_request_by_id" : {
    "__DOC__" : [
      "Only if you are an operator",
      "You are the requestor",
      "or the lead/admin of the context"
    ],
    "assertions" : [
      "ME.IS_$REQUEST_ROLE_$REQUEST_ID<-CALLER",
      "ME.IS_$REQUESTOR_$REQUEST_ID<-CALLER"
    ],
    "policies" : [
      "ME.MAY_$METHOD<-ME.IS_OPERATOR",
      "ME.MAY_$METHOD<-ME.IS_LEAD_$REQUEST_ID",
      "ME.MAY_$METHOD<-ME.IS_ADMIN_$REQUEST_ID",
      "ME.MAY_$METHOD<-ME.IS_REQUESTOR"
     ]
   },

  "invite_member" : {
    "__DOC__" : "Only if you are an operator or a project lead/admin",
    "assertions" : [
      "ME.IS_$ROLE_$PROJECT<-CALLER"
    ],
    "policies" : [
      "ME.MAY_$METHOD<-ME.IS_OPERATOR",
      "ME.MAY_$METHOD_$PROJECT<-ME.IS_LEAD_$PROJECT",
      "ME.MAY_$METHOD_$PROJECT<-ME.IS_ADMIN_$PROJECT"
     ]
   },

   "accept_invitation" : {
     "__DOC__" : "No options required (invite_id, member_id)",
     "assertions" : [
       "ME.INVOKING_ON_$MEMBER<-CALLER"
     ],
     "policies" : [
       "ME.MAY_$METHOD<-ME.IS_OPERATOR",
       "ME.MAY_$METHOD<-ME.INVOKING_ON_$SELF"
     ]
  }

}

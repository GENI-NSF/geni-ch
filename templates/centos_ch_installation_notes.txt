Notes on getting CH up and running from fresh CH install

sudo yum update -y

Disable SELinux:
sudo sed -i -e "s/SELINUX=enforcing/SELINUX=disabled/g" \
     /etc/selinux/config
sudo reboot

# If no DNS name is set, set it in /etc/hosts

# If we've allocated from GRAM, need to open up ports 80, 443, 8443, 8444
# On the GRAM machine:
# WIth slice and project name changed appropriately
source /etc/novarc 
nova --os-username=admin-ch.geni.net:COUNT+slice+CENTOS-TEST --os-password="sliceMaster:-)" --os-tenant-name=ch.geni.net:COUNT+slice+CENTOS-TEST secgroup-add-rule ch.geni.net:COUNT+slice+CENTOS-TEST_secgrp tcp 80 80 0.0.0.0/0
nova --os-username=admin-ch.geni.net:COUNT+slice+CENTOS-TEST --os-password="sliceMaster:-)" --os-tenant-name=ch.geni.net:COUNT+slice+CENTOS-TEST secgroup-add-rule ch.geni.net:COUNT+slice+CENTOS-TEST_secgrp tcp 443 443 0.0.0.0/0
nova --os-username=admin-ch.geni.net:COUNT+slice+CENTOS-TEST --os-password="sliceMaster:-)" --os-tenant-name=ch.geni.net:COUNT+slice+CENTOS-TEST secgroup-add-rule ch.geni.net:COUNT+slice+CENTOS-TEST_secgrp tcp 8443 8444 0.0.0.0/0


sudo yum install -y epel-release
sudo yum install -y automake autoconf
sudo yum install -y emacs-nox git
sudo yum install -y python-sqlalchemy python-psycopg2 postgresql
sudo yum install -y httpd mod_fcgid mod_ssl
sudo yum install -y python-flup python-blinker python-dateutil swig
sudo yum install -y  m2crypto xmlsec1 xmlsec1-openssl
sudo yum install -y python-flask python-flask-xml-rpc pyOpenSSL 

# Sync and install geni-ch
ln -s ~/geni-ch ~/chapi

# Change apache2 to httpd in bin/geni-chapi-install and install CHAPI SW
sudo sed -i -e "s/apache2/httpd/g" ~/geni-ch/bin/geni-chapi-install
~/geni-ch/bin/geni-chapi-install

--- This is where we should be starting after installing geni-ch package ---

# Set up templated files
cd /usr/share/geni-chapi/templates
# Edit parameters.json: make sure to set db_host and ch_host!!
sudo geni-install-templates

CH_DIR=/usr/share/geni-ch
CHAPI_DIR=/usr/share/geni-chapi
CH_HOST=`geni-install-templates --print_parameter ch_host`
DB_HOST=`geni-install-templates --print_parameter db_host`

# Set up database connection.
# If local database, use install_postgresql.sh
# Otherwise:
DB_USER=`geni-install-templates --print_parameter db_user`
DB_DATABASE=`geni-install-templates --print_parameter db_name`
DB_PASSWORD=`geni-install-templates --print_parameter db_pass`
echo "$DB_HOST:*:$DB_DATABASE:$DB_USER:$DB_PASSWORD"  > ~/.pgpass
chmod 0600 ~/.pgpass
touch ~/.psql_history
PSQL="psql -U $DB_USER -h $DB_HOST $DB_DATABASE"

# End of remote database call


for sch in cs logging ma pa sa sr
do
    $PSQL -f $CHAPI_DIR/db/$sch/postgresql/schema.sql
done
for upd in $CHAPI_DIR/db/*/postgresql/update*.sql
do
    $PSQL -f $upd
done
for data in $CHAPI_DIR/db/*/postgresql/data.sql
do
    $PSQL -f $data
done

$PSQL < /tmp/install_service_registry.sql

# Set up CA                                                                
sudo mkdir -p $CH_DIR/CA
sudo mkdir -p $CH_DIR/CA/private
sudo mkdir -p $CH_DIR/CA/certs
sudo mkdir -p $CH_DIR/CA/newcerts
sudo mkdir -p $CH_DIR/CA/crl
sudo geni-init-ca /etc/geni-ch/services.ini

sudo touch $CH_DIR/CA/index.txt
echo "00" > /tmp/serial
sudo mv /tmp/serial $CH_DIR/CA/serial
sudo chown -R root.root $CH_DIR/CA

for srv in sr sa pa ma logging cs pgch km portal
do
    sudo mkdir -p $CH_DIR/$srv
done

sudo geni-init-services /etc/geni-ch/services.ini
sudo chown -R apache.apache /usr/share/geni-ch/CA

# Set up outward facing certs for CH itself
# Create private key, generate CSR, generate cert
sudo openssl genrsa -out ch-$CH_HOST-key.pem 2048
sudo openssl req -new -key ch-$CH_HOST-key.pem -out /tmp/ch-$CH_HOST.csr \
	-subj "/C=US/ST=MA/L=Cambridge/CN=$CH_HOST"
sudo openssl x509 -req -days 365 -in /tmp/ch-$CH_HOST.csr \
	-signkey ch-$CH_HOST-key.pem -out ch-$CH_HOST-cert.pem 
sudo mv ch-$CH_HOST-key.pem ch-$CH_HOST-cert.pem /etc/geni-chapi


# Note: This needs to be moved from geni-portal to geni-ch
# Why do we need this??
sudo mkdir -p /var/www/localhost
sudo mkdir -p /usr/share/geni-ch/ch/www
sudo mkdir -p /var/log/geni-chapi/httpd

# Set up trusted roots
TRUSTED_ROOTS_DIR=$CH_DIR/portal/gcf.d/trusted_roots
sudo mkdir -p $TRUSTED_ROOTS_DIR
sudo ln -s $CH_DIR/CA/cacert.pem $TRUSTED_ROOTS_DIR
sudo ln -s $CH_DIR/ma/ma-cert.pem $TRUSTED_ROOTS_DIR

# Create combined cert
cat /usr/share/geni-ch/CA/cacert.pem /usr/share/geni-ch/ma/ma-cert.pem > /tmp/ca-ma-cert.pem
sudo cp /tmp/ca-ma-cert.pem /usr/share/geni-ch/CA


# Set up GCF link
# cd
# git clone https://github.com/GENI-NSF/geni-tools.git
#sudo mv ~/geni-tools /usr/share/geni-ch
#sudo ln -s /usr/share/geni-ch/geni-tools /usr/share/geni-ch/gcf

# Install ABAC : Grab RPM's from Tom's Zip file (copied to ~)
#cd 
#tar xvfz abac-0.1.9-el7.tar.gz
#cd abac-0.1.9-el7
#sudo rpm -Uvh *.rpm
# End of ABAC install


# Install AMSoil into CHAPI
cd $CH_DIR/chapi
sudo git clone https://github.com/GENI-NSF/geni-soil.git
sudo ln -s geni-soil AMsoil
cd AMsoil

# Set up amsoil links to CHAPI plugins
cd src/plugins # In AMsoil/src/plugins
for pl in chrm chapiv1rpc sarm marm csrm logging opsmon flaskrest pgch
do
    sudo ln -s ../../../chapi/plugins/$pl .
done
cd .. # In AMsoil/src
sudo ln -s main.py main.fcgi

# Install AMSoil and CHAPI
#cd ~/geni-ch/tools
#./install-chapi-centos.sh
#cd /usr/share/geni-ch/chapi/AMsoil/src
#sudo ln -s main.py main.fcgi

sudo service httpd restart


# -----
# TTD
# Add firewall rules back in (Step #7)


# Need to create deploy/config.db in AMsoil
Engine(sqlite:////usr/share/geni-ch/chapi/geni-soil/deploy/config.db)
# Don't now how to create - copied from another machine
# Need to run as apache ot root to write to the database, 
#    but can read as mbrinn

# test amsoil standalone
sudo su -
cd /usr/share/geni-ch/chapi/AMsoil/src
sudo touch ../log/amsoil.log /var/log/geni-chapi/chapi.log
sudo chmod a+w ../log/amsoil.log /var/log/geni-chapi/chapi.log
PYTHONPATH=/usr/share/geni-ch/gcf/src:/usr/share/geni-ch/chapi/chapi python main.py
exit
# Then you can run as yourself or apache 

# Perhaps we should change the database name/user for the CH to be geni-ch
# and for portal to be geni-portal? That is, two different database instances
# in the same postgresql server?

CHAPI Tests:
cd /usr/share/geni-ch/chapi/chapi/tools
# export PYTHONPATH=/usr/share/geni-ch/gcf/src
python client.py --cert /usr/share/geni-ch/ma/ma-cert.pem  \
       --key /usr/share/geni-ch/ma/ma-key.pem  \
       --url https://$CH_HOST/SA --method get_version
python client.py --cert /usr/share/geni-ch/ma/ma-cert.pem  \
       --key /usr/share/geni-ch/ma/ma-key.pem  \
       --url https://$CH_HOST:8444/SR --method get_services

Notes:
In ch-ssl.conf, 
   Haven't put in the MSIE stuff. Not clear what versions we need to support, 
       or if this is still valid or needed for CH.
   Haven't put in the stuff to print "You have reached a GENI page for a 
       domain which is not in use...". This is really portal stuff. Not clear
       we should be doing this for CH.


	

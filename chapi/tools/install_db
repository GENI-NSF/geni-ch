#!/bin/bash

echoerr() { echo "$@" 1>&2; }

if [ -z $1 ]
  then
    echoerr 'Need to supply a VM name'
    exit 1
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
DB_DIR="${DIR}"/../db/migration

if [ ! -d "${DB_DIR}" ]; then
  echoerr "Cannot find db migration dir."
  echoerr "Expected db migration dir at $DB_DIR"
  exit 1
fi

PSQL='psql -U portal -h localhost portal'

#------------------------------------------------------------
# Create the sa_sliver_info table if it does not exist.
#------------------------------------------------------------
$PSQL -c 'select count(*) from sa_sliver_info' > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "creating table sa_sliver_info"
  $PSQL -f "${DB_DIR}"/sliver-info.sql
else
  echo "table sa_sliver_info already exists, skipping creation"
fi

#------------------------------------------------------------
# Migrate the assertions to the ma_member_attribute table.
#------------------------------------------------------------
$PSQL -f "${DB_DIR}"/migrate-assertions.sql


psql -U portal -h localhost portal << EOF
update service_registry set service_url = 'https://${1}/secure/kmhome.php'
       where service_url = 'https://portal.geni.net/secure/kmhome.php';
update service_registry set service_type = service_type + 100
       where service_type in (1, 2, 3, 5, 6, 9);
insert into service_registry (service_type, service_url, service_urn)
       values (1, 'https://${1}/SA', 'urn:publicid:IDN+${1}+authority+sa');
insert into service_registry (service_type, service_url, service_urn)
       values (2, 'https://${1}/SA', 'urn:publicid:IDN+${1}+authority+sa');
insert into service_registry (service_type, service_url, service_urn)
       values (3, 'https://${1}/MA', 'urn:publicid:IDN+${1}+authority+ma');
insert into service_registry (service_type, service_url)
       values (5, 'https://${1}/LOG');
insert into service_registry (service_type, service_url)
       values (6, 'https://${1}/CS');
insert into service_registry (service_type, service_url)
       values (9, 'https://${1}/PGCH');
\q
EOF

#----------------------------------------------------------------------
# Copyright (c) 2011-2013 Raytheon BBN Technologies
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
#
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
#----------------------------------------------------------------------

import amsoil.core.pluginmanager as pm

from tools.chapi_log import *

import ConfigParser
import logging
import logging.config
import logging.handlers
import os.path

CONFIG_FILE = '@pkgsysconfdir@/chapi.ini'

GENI_CH_DIR = '/usr/share/geni-ch'
CA_DIR = os.path.join(GENI_CH_DIR, 'CA')
MA_DIR = os.path.join(GENI_CH_DIR, 'ma')
SA_DIR = os.path.join(GENI_CH_DIR, 'sa')
GCF_ROOT = os.path.join(GENI_CH_DIR, 'portal', 'gcf.d')

VERSION_NUMBER = '1.0'

NAME_KEY = 'name'
VALUE_KEY = 'val'
DESC_KEY = 'desc'

default_parameters = [
    {
        NAME_KEY: 'chapiv1rpc.ch_cert_root', 
        VALUE_KEY: os.path.join(GCF_ROOT, 'trusted_roots'),
        DESC_KEY: ("Folder which includes trusted clearinghouse certificates"
                   + " for GENI API v3 (in .pem format). If relative path,"
                   + " the root is assumed to be git repo root.")
    },
    {
        NAME_KEY: "chapiv1rpc.ch_cert",
        VALUE_KEY: os.path.join(CA_DIR, 'cacert.pem'),
        DESC_KEY: "Location of CH certificate"
    },
    {
        NAME_KEY: "chapiv1rpc.ch_key",
        VALUE_KEY: os.path.join(CA_DIR, 'cakey.pem'),
        DESC_KEY: "Location of CH private key"
    },
    {
        NAME_KEY: "chapi.ma_cert",
        VALUE_KEY: os.path.join(MA_DIR, 'ma-cert.pem'),
        DESC_KEY: "Location of MA certificate"
    },
    {
        NAME_KEY: "chapi.ma_key",
        VALUE_KEY: os.path.join(MA_DIR, 'ma-key.pem'),
        DESC_KEY: "Location of MA private key"
    },
    {
        NAME_KEY: "chapi.sa_cert",
        VALUE_KEY: os.path.join(SA_DIR, 'sa-cert.pem'),
        DESC_KEY: "Location of SA certificate"
    },
    {
        NAME_KEY: "chapi.sa_key",
        VALUE_KEY: os.path.join(SA_DIR, 'sa-key.pem'),
        DESC_KEY: "Location of SA private key"
    },
    {
        NAME_KEY: "chapi.log_file",
        VALUE_KEY: '/var/log/geni-chapi/chapi.log',
        DESC_KEY: "Location of CHAPI's log file"
    },
    {
        NAME_KEY: "chapi.log_config_file",
        VALUE_KEY: '/etc/geni-chapi/logging_config.conf',
        DESC_KEY: "Location of CHAPI's logging configuration file"
    },
    {
        NAME_KEY: "chapi.log_verbose",
        VALUE_KEY: False,
        DESC_KEY: "Set true to enable verbose debug logging in CHAPI."
    },
    {
        NAME_KEY: "chapi.set_params",
        VALUE_KEY: True,
        DESC_KEY: "Flag noting we set the CHAPI params in the config module"
    },
    {
        NAME_KEY: "chrm.authority",
        VALUE_KEY: "host.example.com",
        DESC_KEY: "Name of CH/SA/MA authority"
    },
    {
        NAME_KEY: "flask.debug.client_cert_file",
        VALUE_KEY: "/path/to/developer/cert.pem",
        DESC_KEY: "Debug client cert file"
    },
    {
        NAME_KEY: 'chrm.db_url',
        VALUE_KEY: 'postgresql://scott:tiger@localhost/chapi',
        DESC_KEY: 'Database URL'
    },
    {
        NAME_KEY: "flask.fcgi",
        VALUE_KEY: True,
        DESC_KEY: "Use FCGI server instead of the development server."
    },
    {
        NAME_KEY: "flask.fcgi_port",
        VALUE_KEY: 0,
        DESC_KEY: "Port to bind the Flask RPC to (FCGI server)."
    },
    {
        NAME_KEY: "flask.app_port",
        VALUE_KEY: 8001,
        DESC_KEY: "Port to bind the Flask RPC to (standalone server)."
    },
    {
        NAME_KEY: "flask.debug",
        VALUE_KEY: True,
        DESC_KEY: "Write logging messages for the Flask RPC server."
    }
]


def get_typed_value(parser, section, option, value_type):
    """Get a typed value from a ConfigParser.

    Use the right ConfigParser accessor to get the correct type
    from the ConfigParser. If type is unknown, return None.
    """
    value = None
    if value_type is str:
        value = parser.get(section, option)
    elif value_type is int:
        value = parser.getint(section, option)
    elif value_type is bool:
        value = parser.getboolean(section, option)
    else:
        msg = 'Unknown type %s for default parameter %s'
#        chapi_warn('PARAMETERS',
        logging.warn('PARAMETERS: ' + 
                   msg % (value_type.__name__, pname))
    return value

def param_to_secopt(param):
    """Convert a parameter name to INI section and option.
    Split on the first dot. If not dot exists, return name
    as option, and None for section."""
    sep = '.'
    sep_loc = param.find(sep)
    if sep_loc == -1:
        # no dot in name, skip it
        section = None
        option = param
    else:
        section = param[0:sep_loc]
        option = param[sep_loc+1:]
    return (section, option)

def set_parameters():
    config = pm.getService("config")

    did_set = False
    try:
        did_set = config.get("chapi.set_params")
    except:
        pass
    if did_set:
        chapi_warn('PARAMETERS', 'CHAPI params already in configdb')
        return

    # Set up the defaults
    for param in default_parameters:
        config.install(param[NAME_KEY], param[VALUE_KEY], param[DESC_KEY])
    # Overwrite the defaults with values from the config file
    parser = ConfigParser.SafeConfigParser()
    result = parser.read(CONFIG_FILE)
    if len(result) != 1:
        # file was not read, warn and return
        #chapi_warn('PARAMETERS',
        logging.warn('PARAMETERS: ' + 
                   'Unable to read config file %s' % (CONFIG_FILE))
    else:
        for param in default_parameters:
            pname = param[NAME_KEY]
            (section, option) = param_to_secopt(pname)
            if parser.has_option(section, option):
                value_type = type(param[VALUE_KEY])
                value = get_typed_value(parser, section, option, value_type)
                if value is not None:
                    # If a value was extracted, set it
                    msg = 'Setting parameter %s to %s from %s'
#                    chapi_info('PARAMETERS',
                    logging.info('PARAMETERS: ' + 
                                msg % (pname, value, CONFIG_FILE))
                    config.set(pname, value)

def configure_logging():
    config = pm.getService("config")

    level = logging.INFO
    optlevel = 'INFO'
    # If we got the verbose setting, set optlevel to 'DEBUG'
    chapi_do_debug = config.get("chapi.log_verbose")
    if chapi_do_debug:
        optlevel = 'DEBUG'
        level = logging.DEBUG
    deft = {}
    deft['loglevel'] = optlevel
    deft['logfilename'] = config.get("chapi.log_file")

    # FIXME: Create any needed directories for chapi.log_file?

    # Get the log config file
    logConfigFilename = config.get("chapi.log_config_file")
    # look for it as is or after os.path.abspath()
    fns = [logConfigFilename, os.path.abspath(logConfigFilename)]
    found = False
    for fn in fns:
        if os.path.exists(fn) and os.path.getsize(fn) > 0:
            # Only new loggers get the parameters in the config file.
            # If disable_existing is True(default), then existing loggers are disabled,
            # unless they (or ancestors, not 'root') are explicitly listed in the config file.
            try:
                logging.info("About to configure logging from file %s", fn)
                logging.config.fileConfig(fn, defaults=deft, disable_existing_loggers=False)
                logging.info("Configured logging from file %s", fn)
                found = True
            except Exception, e:
                import traceback
                logging.error("Failed to configure logging from %s: %s", fn, e)
                logging.debug(traceback.format_exc())
            break

    if not found:
        chapi_logging_basic_config(level)
#        fmt = '%(asctime)s %(levelname)-8s %(name)s: %(message)s'
#        logging.basicConfig(level=level,format=fmt,datefmt='%m/%d/%Y %H:%M:%S')       
        logging.warn("***Failed to find or use log config file %s", logConfigFilename)

    # Clean up the old loggers so they stop sending output to the old places
    amsoillogger = logging.getLogger("amsoil")
    if amsoillogger.getEffectiveLevel() != level:
        logging.warn("***AMSoil logger didnt get changes?")
        amsoillogger.setLevel(level)
    toremove = None
    for handler in amsoillogger.handlers:
        # remove the old handler that put this in amsoil.log
        logging.warn("amsoil handler filename: %s, logfilename: %s", handler.baseFilename, deft['logfilename'])
        if not handler.baseFilename.startswith(deft['logfilename']):
            logging.warn("***Removing handler from amsoil logger with filename %s" % handler.baseFilename)
            toremove = handler
            break
        else:
            fn = None
            if isinstance(handler, logging.FileHandler):
                fn = handler.baseFilename
                logging.warn("***Keeping amsoil handler with level %s, formatter %s, file %s", logging.getLevelName(handler.level), handler.formatter._fmt, fn)
            else:
                logging.warn("***Keeping amsoil handler (non file) with level %s, formatter %s", logging.getLevelName(handler.level), handler.formatter._fmt)

    if toremove:
        amsoillogger.removeHandler(toremove)
    else:
        logging.warn("***Failed to find the old amsoil handler")

    chapilogger = logging.getLogger("chapi")
    toremove = None
    for handler in chapilogger.handlers:
        # remove the old handler that put this in amsoil.log
        logging.warn("chapi handler filename: %s, logfilename: %s", handler.baseFilename, deft['logfilename'])
        if not handler.baseFilename.startswith(deft['logfilename']):
            logging.warn("***Removing handler from chapi logger with filename %s, level %s, formatter %s" % handler.baseFilename, logging.getLevelName(handler.level), handler.formatter._fmt)
            toremove = handler
            break
        else:
            fn = None
            if isinstance(handler, logging.FileHandler):
                fn = handler.baseFilename
                logging.warn("***Keeping chapi handler with level %s, formatter %s, file %s", logging.getLevelName(handler.level), handler.formatter._fmt, fn)
            else:
                logging.warn("***Keeping chapi handler (non file) with level %s, formatter %s", logging.getLevelName(handler.level), handler.formatter._fmt)
    if toremove:
        chapilogger.removeHandler(toremove)
    else:
        logging.info("***Failed to find any old chapi handler - expected now I think")
